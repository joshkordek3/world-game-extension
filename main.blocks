<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="i1%CUg(=gH}5:`(]*{5W" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="Ej53,5$:jjmgp(^wD#9p" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace World {" line1="//% block=&quot;move $leftrightupdown left/right/up/down by $steps&quot;" line2="//% group=&quot;Moving&quot;" line3="export function move (leftrightupdown: string, steps: number) {" line4="    if (leftrightupdown == &quot;left&quot;) {" line5="        leftright_difference += steps" line6="    } else if (leftrightupdown == &quot;right&quot;) {" line7="        leftright_difference += 0 - steps" line8="    } else if (leftrightupdown == &quot;up&quot;) {" line9="        updown_difference += steps" line10="    } else if (leftrightupdown == &quot;down&quot;) {" line11="        updown_difference += 0 - steps" line12="    }" line13="    show()" line14="}" line15="//% block=&quot;move $leftrightupdown and $leftrightupdown2 by $steps&quot;" line16="//% group=&quot;Moving&quot;" line17="export function move_ (leftrightupdown: string, leftrightupdown2: string, steps: number) {" line18="    move(leftrightupdown, steps)" line19="    move(leftrightupdown2, steps)" line20="    show()" line21="}" line22="//% block=&quot;update the display of the world&quot;" line23="//% group=&quot;Diplaying&quot;" line24="export function show () {" line25="    basic.clearScreen()" line26="    for (let index = 0; index &lt;= world.length - 1; index++) {" line27="        led.plot(parseFloat(world[index].substr(0, 2)) + leftright_difference, parseFloat(world[index].substr(2, 2)) + updown_difference)" line28="    }" line29="}" line30="//% block=&quot;x position&quot;" line31="//% group=&quot;Position&quot;" line32="export function x_pos () {" line33="    return 2 - leftright_difference" line34="}" line35="//% block=&quot;y position&quot;" line36="//% group=&quot;Position&quot;" line37="export function y_pos () {" line38="    return 2 - updown_difference" line39="}" line40="//% block=&quot;set spawnpoint to&quot;" line41="//% block=&quot;go to x: $x y: $y&quot;" line42="//% group=&quot;Position&quot;" line43="export function goto (x: number, y: number) {" line44="    updown_difference = 2 - y" line45="    leftright_difference = 2 - x" line46="    show()" line47="}" line48="//% block=&quot;number of blocks in the world&quot;" line49="//% group=&quot;Position&quot;" line50="export function world_blocks_detect () {" line51="    return world.length" line52="}" line53="//% block=&quot;is there a block at x: $x_pos y: $y_pos&quot;" line54="//% group=&quot;Detect&quot;" line55="export function block_detect (x_pos: number, y_pos: number) {" line56="    temp_txt = convertToText(x_pos)" line57="    temp_txt2 = convertToText(y_pos)" line58="    for (let index6 = 0; index6 &lt; 2 - temp_txt.length; index6++) {" line59="        temp_txt = &quot;0&quot; + temp_txt" line60="    }" line61="    for (let index7 = 0; index7 &lt; 2 - temp_txt2.length; index7++) {" line62="        temp_txt2 = &quot;0&quot; + temp_txt2" line63="    }" line64="    return world.indexOf(&quot;&quot; + temp_txt + temp_txt2) != -1" line65="}" line66="//% block=&quot;world $xy (x/y) coordinate at item $place (min=1)&quot;" line67="//% group=&quot;Position&quot;" line68="export function world_blocks (xy: string, place: number) {" line69="    if (xy = &quot;x&quot;) {" line70="        return parseFloat(world[place - 1 ].substr(0, 2))" line71="    } else if (xy = &quot;y&quot;) {" line72="        return parseFloat(world[place - 1].substr(2, 2)) " line73="    }" line74="    return 0" line75="}" line76="//% block=&quot;world (array)&quot;" line77="//% group=&quot;Position&quot;" line78="export function all_world_blocks () {" line79="    return world" line80="}" line81="//% block=&quot;add by $columnrow (column/row) from $from_xy to $to_xy on $xy&quot;" line82="//% group=&quot;Creating&quot;" line83="export function add_by (columnrow: string, from_xy: number, to_xy: number, xy: number) {" line84="    if (columnrow == &quot;column&quot;) {" line85="        for (let index2 = 0; index2 &lt;= to_xy - from_xy; index2++) {" line86="            add(xy, index2 + from_xy)" line87="        }" line88="    } else if (columnrow == &quot;row&quot;) {" line89="        for (let index3 = 0; index3 &lt;= to_xy - from_xy; index3++) {" line90="            add(index3 + from_xy, xy)" line91="        }" line92="    }" line93="}" line94="//% block=&quot;add x $x and y $y to the world&quot;" line95="//% group=&quot;Creating&quot;" line96="export function add (x: number, y: number) {" line97="    temp_txt = convertToText(x)" line98="    temp_txt2 = convertToText(y)" line99="    for (let index4 = 0; index4 &lt; 2 - temp_txt.length; index4++) {" line100="        temp_txt = &quot;0&quot; + temp_txt" line101="    }" line102="    for (let index5 = 0; index5 &lt; 2 - temp_txt2.length; index5++) {" line103="        temp_txt2 = &quot;0&quot; + temp_txt2" line104="    }" line105="    world.push(&quot;&quot; + temp_txt + temp_txt2)" line106="}" line107="let temp_txt2 = &quot;&quot;" line108="let temp_txt = &quot;&quot;" line109="let world: string[] = []" line110="//let world2: boolean[][] = [[]];" line111="let updown_difference = 0" line112="let leftright_difference = 0" line113="}" numlines="114"></mutation></block></statement></block></xml>